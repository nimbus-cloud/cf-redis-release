<%
  config = {
    'api' => p('cf.api_url'),
    'org_name' => p('cf.org_name'),
    'space_name' => p('cf.space_name'),
    'apps_domain' => p('cf.apps_domain'),
    'system_domain' => p('cf.system_domain'),
    'admin_user' => p('cf.admin_username'),
    'admin_password' => p('cf.admin_password'),
    'service_name' => p('redis.broker.service_name'),
    'plan_names' => [],
    'retry' => {
      'max_attempts' => p('retry.max_attempts'),
      'backoff' => p('retry.backoff'),
      'baseline_interval_milliseconds' => p('retry.baseline_interval_milliseconds')
    },
    'skip_ssl_validation' => p('cf.skip_ssl_validation'),
    'create_permissive_security_group' => false,
    'security_groups' => [
      {
        'protocol' => 'tcp',
        'ports' => '32768-61000',
        'destination' => link('redis_broker').instances.first.address
      }
    ]
  }

  if p('redis.broker.service_instance_limit').to_i > 0
    config['plan_names'].push('shared-vm')
  end

  dedicated_node_addresses = p('redis.broker.dedicated_nodes').clone
  if dedicated_node_addresses.empty?
    link('dedicated_node').instances.each do |instance|
      dedicated_node_addresses.push(instance.address)
    end
  end

  unless dedicated_node_addresses.empty?
    config['plan_names'].push('dedicated-vm')

    dedicated_node_addresses.each do |node|
      config['security_groups'].push({
        'protocol' => 'tcp',
        'ports' => '6379',
        'destination' => node
      })
    end
  end
%>

<%= config.to_json %>
